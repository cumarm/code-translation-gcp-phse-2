##LAB 2: Google Cloud Fundamentals: Getting Started with Compute Engine

##OJECRIVES

Create a Compute Engine virtual machine using the Google Cloud Platform (GCP) Console.

Create a Compute Engine virtual machine using the gcloud command-line interface.

Connect between the two instances

##STEPS

1:Create a virtual machine using the GCP Console
	Gcloud compute instances create my-vm-1--Machine type"n1-standard-1--Image project "Debian GNU/Linux 9 (stretch)v-0150212" -- subnet "defoult"-- tags http

2:Create a Compute Engine virtual machine using the gcloud command-line interface
		gcloud config set compute/zone us-central1-b--gcloud compute instances create "my-vm-2"--machine-type "n1-standard-1"--machine-type "n1-standard-1"--image-project "debian-cloud"--image "debian-9-stretch-v20190213"--subnet "default"

3: Connect between VM instances
	1.Use the ping command to confirm that my-vm-2 can reach my-vm-1 over the network:
		connect to my vm-2
		gcloud compute ssh my-vm-2
		ping my from my-vm-2
		  ping -c 4 my-vm-1
		Use the ssh command to open a command prompt on my-vm-1: 
			ssh my-vm-1
		At the command prompt on my-vm-1, install the Nginx web server:
			sudo apt-get install nginx-light -y
		Use the nano text editor to add a custom message to the home page of the web server:
			sudo nano /var/www/html/index.nginx-debian.html
		Use the arrow keys to move the cursor to the line just below the h1 header. Add text like this, and replace YOUR_NAME with your name:
			hi from omar 
		exit Confirm that the web server is serving your new page. At the command prompt on my-vm-1, execute this command:
			curl http://localhost
	the result The response will be the HTML source of the web server's home page, including your line of custom text.		
		exit the command prompt on my-vm-1, execute this command:
			exit
	To confirm that my-vm-2 can reach the web server on my-vm-1, at the command prompt on my-vm-2, execute this command:
		curl http://my-vm-1
	the result The response will again be the HTML source of the web server's home page, including your line of custom text.

LAB3: Google Cloud Fundamentals: Getting Started with GKE

OJECRIVES
	Provision a Kubernetes cluster using Kubernetes Engine.
    Deploy and manage Docker containers using kubectl
#STEPS

	Confirm that needed APIs are enabled
		 the name of your GCP project. This value is shown in the top bar of the Google Cloud Platform Console. It will be of the form qwiklabs-gcp- followed by hexadecimal numbers
		confirm that both of these APIs are enabled:
			Kubernetes Engine API
			Container Registry API 
		place the zone that Qwiklabs assigned you to into an environment variable called MY_ZONE. At the Cloud Shell prompt, type this partial command:
			export MY_ZONE=
		when complete command will look similar to this:
			export MY_ZONE=us-central1-a
		Start a Kubernetes cluster managed by Kubernetes Engine. Name the cluster webfrontend and configure it to run 2 nodes:
			gcloud container clusters create webfrontend --zone $MY_ZONE --num-nodes 2
			result: It takes several minutes to create a cluster as Kubernetes Engine provisions virtual machines for you
		After the cluster is created, check your installed version of Kubernetes using the kubectl version command:
			kubectl version
			result: gcloud container clusters create command automatically authenticated kubectl for you.
			Your Kubernetes cluster is now ready for use.
		Run and deploy a container:
			From your Cloud Shell prompt, launch a single instance of the nginx container. (Nginx is a popular web server.)
				kubectl create deploy nginx --image=nginx:1.17.10
			note: In Kubernetes, all containers run in pods. This use of the kubectl create command caused Kubernetes to create a deployment consisting of a single pod containing the nginx container. 
		View the pod running the nginx container:
			kubectl get pods
		Expose the nginx container to the Internet:
			kubectl expose deployment nginx --port 80 --type LoadBalancer
			the result: Kubernetes created a service and an external load balancer with a public IP address attached to it.
		View the new service:
			kubectl get services
			You can use the displayed external IP address to test and contact the nginx container remotely.
		Open a new web browser tab and paste your cluster's external IP address into the address bar. The default home page of the Nginx browser is displayed.
		Scale up the number of pods running on your service:
			kubectl scale deployment nginx --replicas 3
			Scaling up a deployment is useful when you want to increase available resources for an application that is becoming more popular.
		Confirm that Kubernetes has updated the number of pods:
			kubectl get pods
		Confirm that your external IP address has not changed:
			kubectl get services
		Return to the web browser tab in which you viewed your cluster's external IP address. Refresh the page to confirm that the nginx web server is still responding.
	